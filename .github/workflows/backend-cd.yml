name: Backend CD

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  ECR_REGISTRY: ${{ vars.AWS_ECR_REGISTRY }}
  ECR_REPOSITORY: ${{ vars.AWS_ECR_BE_REPO_NAME }}
  IMAGE_TAG: ${{ github.sha }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1
  
jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install pipenv
        run: pip install pipenv

      - name: Cache pipenv environment
        id: cache-pipenv
        uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install dependencies
        run: cd starter/backend && pipenv install --dev

      - name: Lint code
        run: cd starter/backend && pipenv run lint

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install pipenv
        run: pip install pipenv

      - name: Cache pipenv environment
        id: cache-pipenv
        uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install dependencies
        run: cd starter/backend && pipenv install

      - name: Run tests
        run: cd starter/backend && pipenv run test

  build:
    name: Build and Push Docker Image
    needs: [ lint, test ]
    environment:
      name: dev
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install pipenv
        run: pip install pipenv

      - name: Install dependencies
        run: cd starter/backend && pipenv install

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to AWS ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        run: |
          cd starter/backend
          docker build -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" .
          echo "List Docker images"
          docker images
          echo "ECR_REGISTRY= $ECR_REGISTRY"
          echo "ECR_REPOSITORY= $ECR_REPOSITORY"
          echo "IMAGE URI =$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "Image pushed"
  # deploy:
  #   name: Deploy docker image
  #   needs: [ build ]
  #   environment:
  #     name: dev
  #   runs-on: ubuntu-latest
  #   steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with: 
          aws-region: us-east-1

      - name: Log in to AWS ECR
        uses: aws-actions/amazon-ecr-login@v1
          
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name my-eks-cluster

      - name: Set Docker image in Kustomize
        env:
          ECR_REGISTRY: ${{ vars.AWS_ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ vars.AWS_ECR_BE_REPO_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd starter/backend/k8s
          echo ${{ ECR_REGISTRY }}
          echo ${{ ECR_REPOSITORY }}
          echo ${{ IMAGE_TAG }}
          kustomize edit set image backend=${{ ECR_REGISTRY }}/${{ ECR_REPOSITORY }}:${{ IMAGE_TAG }}

      - name: Apply Kubernetes resources
        run: |
          cd starter/backend/k8s
          kustomize build > k8s.yaml
          cat k8s.yaml
          kubectl apply -f -
      
